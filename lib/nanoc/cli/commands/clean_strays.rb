# encoding: utf-8

usage       'clean_strays'
summary     'cleans up stray files in the output directory'
aliases     :ca
description <<-EOS
Clean up all stray files in the output directory. This will remove any file not
generated by nanoc.
EOS

run do |opts, args, cmd|
  Nanoc3::CLI::Commands::CleanStrays.call(opts, args, cmd)
end

module Nanoc3::CLI
  class Logger

    # Maps file types (`:file` and `:dir`) onto their ANSI color codes.
    RM_COLORS = {
      :file => "\e[1m" + "\e[32m", # bold + green
      :dir  => "\e[1m"             # bold
    }

    # Logs a rm-related action.
    #
    # @param [:file, :dir] type The file type removed
    # @param [String] name The name of the file or directory removed
    #
    # @return [void]
    def rm(type, name)
      log(
        :high,
        '%s%18s%s  %s' % [
          color? ? RM_COLORS[type.to_sym] : '',
          "removed #{type}",
          color? ? "\e[0m" : '',
          name
        ]
      )
    end
  end
end

module Nanoc3::CLI::Commands

  class CleanStrays < ::Nanoc3::CLI::Command

    def run
      # Get compiled files
      compiled_files = self.site.items.map do |item|
        item.reps.map do |rep|
          rep.raw_path
        end
      end.flatten.compact.select { |f| File.file?(f) }

      # Get present files
      present_files = Dir['output/**/*'].select { |f| File.file?(f) }

      # Remove stray files
      stray_files = present_files - compiled_files
      stray_files.each do |f|
        Nanoc3::CLI::Logger.instance.rm(:file, f)
        FileUtils.rm(f)
      end

      # Remove empty directories
      Dir['output/**/*'].select { |f| File.directory?(f) }.sort_by{ |d| -d.length }.each do |dir|
        next if Dir.foreach(dir) { |n| break true if n !~ /\A\.\.?\z/ }

        Nanoc3::CLI::Logger.instance.rm(:dir, dir)
        Dir.rmdir(dir)
      end
    end
  end
end